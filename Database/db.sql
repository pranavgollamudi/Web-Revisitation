/*
SQLyog Community Edition- MySQL GUI v6.07
Host - 5.5.30 : Database - revisitation
*********************************************************************
Server version : 5.5.30
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

create database if not exists `revisitation`;

USE `revisitation`;

/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

/*Table structure for table `child_1` */

DROP TABLE IF EXISTS `child_1`;

CREATE TABLE `child_1` (
  `child_1` varchar(100) NOT NULL,
  PRIMARY KEY (`child_1`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Data for the table `child_1` */

insert  into `child_1`(`child_1`) values ('Busy'),('Relaxed');

/*Table structure for table `child_2` */

DROP TABLE IF EXISTS `child_2`;

CREATE TABLE `child_2` (
  `level_1` varchar(110) DEFAULT NULL,
  `level_2` varchar(110) NOT NULL,
  PRIMARY KEY (`level_2`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Data for the table `child_2` */

insert  into `child_2`(`level_1`,`level_2`) values ('Relaxed','listening music'),('Busy','Programming'),('Busy','ReadWrite');

/*Table structure for table `child_3` */

DROP TABLE IF EXISTS `child_3`;

CREATE TABLE `child_3` (
  `level_1` varchar(110) DEFAULT NULL,
  `level_2` varchar(110) DEFAULT NULL,
  `level_3` varchar(110) NOT NULL,
  PRIMARY KEY (`level_3`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Data for the table `child_3` */

insert  into `child_3`(`level_1`,`level_2`,`level_3`) values ('Busy','Programming','Editplus'),('Busy','Programming','Tomcat'),('Relaxed','listening music','vlc'),('Busy','ReadWrite','Winword'),('Relaxed','listening music','wmplayer');

/*Table structure for table `context` */

DROP TABLE IF EXISTS `context`;

CREATE TABLE `context` (
  `uid` int(11) NOT NULL,
  `uri` varchar(1000) NOT NULL,
  `year_` varchar(100) NOT NULL,
  `month_` varchar(100) NOT NULL,
  `month2_` varchar(100) NOT NULL,
  `date_` varchar(100) NOT NULL,
  `location` varchar(500) NOT NULL,
  `user_` varchar(100) NOT NULL,
  `seconds` int(11) DEFAULT NULL,
  `data_` longtext,
  `title_` varchar(1000) DEFAULT NULL,
  PRIMARY KEY (`uid`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Data for the table `context` */

insert  into `context`(`uid`,`uri`,`year_`,`month_`,`month2_`,`date_`,`location`,`user_`,`seconds`,`data_`,`title_`) values (1,'www.tutorialspoint.com/data_mining/','2017','August','Middle August','1/8/2017','Home','sajid24x7@gmail.com',119,'Jobs  SENDFiles  Whiteboard  Net Meeting Tools  Articles Facebook Google+ Twitter Linkedin YouTube Home Tutorials Library Coding Ground Tutor Connect Videos Search Data Mining Tutorial Data Mining - Home Data Mining - Overview Data Mining - Tasks Data Mining - Issues Data Mining - Evaluation Data Mining - Terminologies Data Mining - Knowledge Discovery Data Mining - Systems Data Mining - Query Language Classification & Prediction Data Mining - Decision Tree Induction Data Mining - Bayesian Classification Rules Based Classification Data Mining - Classification Methods Data Mining - Cluster Analysis Data Mining - Mining Text Data Data Mining - Mining WWW Data Mining - Applications & Trends Data Mining - Themes DM Useful Resources Data Mining - Quick Guide Data Mining - Useful Resources Data Mining - Discussion Selected Reading Developer\'s Best Practices Questions and Answers Effective Resume Writing HR Interview Questions Computer Glossary Who is Who Previous Page Next Page   Data Mining Tutorial PDF Version Quick Guide Resources Job Search Discussion Data Mining is defined as the procedure of extracting information from huge sets of data. In other words, we can say that data mining is mining knowledge from data. The tutorial starts off with a basic overview and the terminologies involved in data mining and then gradually moves on to cover topics such as knowledge discovery, query language, classification and prediction, decision tree induction, cluster analysis, and how to mine the Web. Audience This tutorial has been prepared for computer science graduates to help them understand the basic-to-advanced concepts related to data mining. Prerequisites Before proceeding with this tutorial, you should have an understanding of the basic database concepts such as schema, ER model, Structured Query language and a basic knowledge of Data Warehousing concepts. Previous Page Print PDF Next Page   Advertisements Write for us FAQ\'s Helping Contact © Copyright 2017. All Rights Reserved. go','Data Mining Tutorial'),(2,'www.codecademy.com/learn/learn-java/','2017','August','Middle August','1/8/2017','Home','sajid24x7@gmail.com',54,'Catalog Log in Sign up Java Icon Learn Java Continue your learning by starting Learn Java. Start Want more practice and review? Upgrade for the complete experience. 7 Projects 4 Quizzes Get Instant Access » OverviewSyllabus Course Outcomes In this course you\'ll be exposed to fundamental programming concepts, including object-oriented programming (OOP) using Java. You\'ll build 7 Java projects—like a basic calculator—to help you practice along the way. Why learn Java? Java is among the most popular programming languages out there, mainly because of how versatile and compatible it is. Java can be used for a large number of things, including software development, mobile applications, and large systems development. Knowing Java opens a great deal of doors for you as a developer. Teaching the world how to code. CodecademyAboutStoriesWe\'re HiringFor BusinessFor Education ResourcesArticlesForumsHelpBlog Learn To CodeMake a WebsiteMake an Interactive WebsiteLearn SassDeploy a WebsiteLearn JavaScriptLearn RailsLearn AngularJSLearn ReactJS: Part ILearn ReactJS: Part IIRuby on Rails AuthenticationLearn the Command LineLearn GitLearn SQLSQL: Table TransformationSQL: Analyzing Business MetricsLearn JavaLearn HTML & CSSLearn Responsive DesignLearn RubyLearn Python HTML & CSSJavaScriptjQueryPHPPythonLearn APIs Privacy PolicyTerms Made in NYC © 2017 Codecademy EnglishEspañolFrançaisPortuguês (Brazil)','Learn Java | Codecademy'),(3,'www.tutorialspoint.com/java/java_overview.htm','2017','August','Middle August','1/8/2017','Home','sajid24x7@gmail.com',55,'Jobs  SENDFiles  Whiteboard  Net Meeting Tools  Articles Facebook Google+ Twitter Linkedin YouTube Home Tutorials Library Coding Ground Tutor Connect Videos Search Java Tutorial Java - Home Java - Overview Java - Environment Setup Java - Basic Syntax Java - Object & Classes Java - Basic Datatypes Java - Variable Types Java - Modifier Types Java - Basic Operators Java - Loop Control Java - Decision Making Java - Numbers Java - Characters Java - Strings Java - Arrays Java - Date & Time Java - Regular Expressions Java - Methods Java - Files and I/O Java - Exceptions Java - Inner classes Java Object Oriented Java - Inheritance Java - Overriding Java - Polymorphism Java - Abstraction Java - Encapsulation Java - Interfaces Java - Packages Java Advanced Java - Data Structures Java - Collections Java - Generics Java - Serialization Java - Networking Java - Sending Email Java - Multithreading Java - Applet Basics Java - Documentation Java Useful Resources Java - Questions and Answers Java - Quick Guide Java - Useful Resources Java - Discussion Java - Examples Selected Reading Developer\'s Best Practices Questions and Answers Effective Resume Writing HR Interview Questions Computer Glossary Who is Who Java - Overview Advertisements Previous Page Next Page   Java programming language was originally developed by Sun Microsystems which was initiated by James Gosling and released in 1995 as core component of Sun Microsystems\' Java platform (Java 1.0 [J2SE]). The latest release of the Java Standard Edition is Java SE 8. With the advancement of Java and its widespread popularity, multiple configurations were built to suit various types of platforms. For example: J2EE for Enterprise Applications, J2ME for Mobile Applications. The new J2 versions were renamed as Java SE, Java EE, and Java ME respectively. Java is guaranteed to be Write Once, Run Anywhere. Java is ? Object Oriented ? In Java, everything is an Object. Java can be easily extended since it is based on the Object model. Platform Independent ? Unlike many other programming languages including C and C++, when Java is compiled, it is not compiled into platform specific machine, rather into platform independent byte code. This byte code is distributed over the web and interpreted by the Virtual Machine (JVM) on whichever platform it is being run on. Simple ? Java is designed to be easy to learn. If you understand the basic concept of OOP Java, it would be easy to master. Secure ? With Java\'s secure feature it enables to develop virus-free, tamper-free systems. Authentication techniques are based on public-key encryption. Architecture-neutral ? Java compiler generates an architecture-neutral object file format, which makes the compiled code executable on many processors, with the presence of Java runtime system. Portable ? Being architecture-neutral and having no implementation dependent aspects of the specification makes Java portable. Compiler in Java is written in ANSI C with a clean portability boundary, which is a POSIX subset. Robust ? Java makes an effort to eliminate error prone situations by emphasizing mainly on compile time error checking and runtime checking. Multithreaded ? With Java\'s multithreaded feature it is possible to write programs that can perform many tasks simultaneously. This design feature allows the developers to construct interactive applications that can run smoothly. Interpreted ? Java byte code is translated on the fly to native machine instructions and is not stored anywhere. The development process is more rapid and analytical since the linking is an incremental and light-weight process. High Performance ? With the use of Just-In-Time compilers, Java enables high performance. Distributed ? Java is designed for the distributed environment of the internet. Dynamic ? Java is considered to be more dynamic than C or C++ since it is designed to adapt to an evolving environment. Java programs can carry extensive amount of run-time information that can be used to verify and resolve accesses to objects on run-time. History of Java James Gosling initiated Java language project in June 1991 for use in one of his many set-top box projects. The language, initially called ‘Oak’ after an oak tree that stood outside Gosling\'s office, also went by the name ‘Green’ and ended up later being renamed as Java, from a list of random words. Sun released the first public implementation as Java 1.0 in 1995. It promised Write Once, Run Anywhere (WORA), providing no-cost run-times on popular platforms. On 13 November, 2006, Sun released much of Java as free and open source software under the terms of the GNU General Public License (GPL). On 8 May, 2007, Sun finished the process, making all of Java\'s core code free and open-source, aside from a small portion of code to which Sun did not hold the copyright. Tools You Will Need For performing the examples discussed in this tutorial, you will need a Pentium 200-MHz computer with a minimum of 64 MB of RAM (128 MB of RAM recommended). You will also need the following softwares ? Linux 7.1 or Windows xp/7/8 operating system Java JDK 8 Microsoft Notepad or any other text editor This tutorial will provide the necessary skills to create GUI, networking, and web applications using Java. Try It Option We have provided you with an option to compile and execute available code online. Just click the Try it button avaiable at the top-right corner of the code window to compile and execute the available code. There are certain examples which cannot be executed online, so we have skipped those examples. \npublic class MyFirstJavaProgram {\n\n   public static void main(String []args) {\n      System.out.println(\"Hello World\");\n   }\n} \n There may be a case that you do not see the result of the compiled/executed code. In such case, you can re-try to compile and execute the code using execute button available in the compilation pop-up window. What is Next? The next chapter will guide you to how you can obtain Java and its documentation. Finally, it instructs you on how to install Java and prepare an environment to develop Java applications. Previous Page Print Next Page   Advertisements Write for us FAQ\'s Helping Contact © Copyright 2017. All Rights Reserved. go','Java Overview'),(4,'www.tutorialspoint.com/java/','2017','August','Middle August','1/8/2017','Home','sajid24x7@gmail.com',77,'Jobs  SENDFiles  Whiteboard  Net Meeting Tools  Articles Facebook Google+ Twitter Linkedin YouTube Home Tutorials Library Coding Ground Tutor Connect Videos Search Java Tutorial Java - Home Java - Overview Java - Environment Setup Java - Basic Syntax Java - Object & Classes Java - Basic Datatypes Java - Variable Types Java - Modifier Types Java - Basic Operators Java - Loop Control Java - Decision Making Java - Numbers Java - Characters Java - Strings Java - Arrays Java - Date & Time Java - Regular Expressions Java - Methods Java - Files and I/O Java - Exceptions Java - Inner classes Java Object Oriented Java - Inheritance Java - Overriding Java - Polymorphism Java - Abstraction Java - Encapsulation Java - Interfaces Java - Packages Java Advanced Java - Data Structures Java - Collections Java - Generics Java - Serialization Java - Networking Java - Sending Email Java - Multithreading Java - Applet Basics Java - Documentation Java Useful Resources Java - Questions and Answers Java - Quick Guide Java - Useful Resources Java - Discussion Java - Examples Selected Reading Developer\'s Best Practices Questions and Answers Effective Resume Writing HR Interview Questions Computer Glossary Who is Who Previous Page Next Page   Java Tutorial PDF Version Quick Guide Resources Job Search Discussion Java is a high-level programming language originally developed by Sun Microsystems and released in 1995. Java runs on a variety of platforms, such as Windows, Mac OS, and the various versions of UNIX. This tutorial gives a complete understanding of Java. This reference will take you through simple and practical approaches while learning Java Programming language. Audience This tutorial has been prepared for the beginners to help them understand the basic to advanced concepts related to Java Programming language. Prerequisites Before you start practicing various types of examples given in this reference, we assume that you are already aware about computer programs and computer programming languages. Java Offline Mobile App Execute Java Online For most of the examples given in this tutorial, you will find a ‘Try it’ option, which you can use to execute your Java programs at the spot and enjoy your learning. try the following example using the ‘Try it’ option available at the top right corner of the following sample code box ? \npublic class MyFirstJavaProgram {\n\n   public static void main(String []args) {\n      System.out.println(\"Hello World\");\n   }\n} \n Previous Page Print Next Page   Advertisements Write for us FAQ\'s Helping Contact © Copyright 2017. All Rights Reserved. go','Java Tutorial'),(5,'www.udemy.com/java-tutorial/','2017','August','Middle August','1/8/2017','Home','sajid24x7@gmail.com',87,'Categories Development All Development Web Development Mobile Apps Programming Languages Game Development Databases Software Testing Software Engineering Development Tools E-Commerce Business All Business Finance Entrepreneurship Communications Management Sales Strategy Operations Project Management Business Law Data & Analytics Home Business Human Resources Industry Media Real Estate Other IT & Software All IT & Software IT Certification Network & Security Hardware Operating Systems Other Office Productivity All Office Productivity Microsoft Apple Google SAP Intuit Salesforce Oracle Other Personal Development All Personal Development Personal Transformation Productivity Leadership Personal Finance Career Development Parenting & Relationships Happiness Religion & Spirituality Personal Brand Building Creativity Influence Self Esteem Stress Management Memory & Study Skills Motivation Other Design All Design Web Design Graphic Design Design Tools User Experience Game Design Design Thinking 3D & Animation Fashion Architectural Design Interior Design Other Marketing All Marketing Digital Marketing Search Engine Optimization Social Media Marketing Branding Marketing Fundamentals Analytics & Automation Public Relations Advertising Video & Mobile Marketing Content Marketing Non-Digital Marketing Growth Hacking Affiliate Marketing Product Marketing Other Lifestyle All Lifestyle Arts & Crafts Food & Beverage Beauty & Makeup Travel Gaming Home Improvement Pet Care & Training Other Photography All Photography Digital Photography Photography Fundamentals Portraits Landscape Black & White Photography Tools Mobile Photography Travel Photography Commercial Photography Wedding Photography Wildlife Photography Video Design Other Health & Fitness All Health & Fitness Fitness General Health Sports Nutrition Yoga Mental Health Dieting Self Defense Safety & First Aid Dance Meditation Other Teacher Training All Teacher Training Instructional Design Educational Development Teaching Tools Other Music All Music Instruments Production Music Fundamentals Vocal Music Techniques Music Software Other Academics All Academics Social Science Math & Science Humanities Language All Language English Spanish German French Japanese Portuguese Chinese Russian Latin Arabic Hebrew Italian Other Test Prep All Test Prep Grad Entry Exam International High School College Entry Exam Test Taking Skills Other Search: Cancel   Become an Instructor Shopping cart Login Sign Up Categories Sign Up Login Become an Instructor Help Menu Categories Development Business IT & Software Office Productivity Personal Development Design Marketing Lifestyle Photography Health & Fitness Teacher Training Music Academics Language Test Prep Java Tutorial for Complete Beginners 4.4 (35,312 ratings) Instead of using a simple lifetime average, Udemy calculates a course\'s star rating by considering a number of different factors such as the number of ratings, the age of ratings, and the likelihood of fraudulent ratings. 731,008 students enrolled Wishlisted Wishlist Please confirm that you want to add Java Tutorial for Complete Beginners to your Wishlist. Add to Wishlist Java Tutorial for Complete Beginners Learn to program using the Java programming language 4.4 (35,312 ratings) Instead of using a simple lifetime average, Udemy calculates a course\'s star rating by considering a number of different factors such as the number of ratings, the age of ratings, and the likelihood of fraudulent ratings. 731,008 students enrolled Created by John Purcell Last updated 10/2015 English English Preview This Course Price: Free Enroll Now Includes: 16 hours on-demand video 5 Articles Full lifetime access Access on mobile and TV Certificate of Completion What Will I Learn? Learn to program in Java View Curriculum Requirements Basic fluency with computers Description Learn to program in the Java programming language. This course assumes no prior programming knowledge, just a desire to learn to program. Who is the target audience? Anyone who wants to learn Java Students Who Viewed This Course Also Viewed Curriculum For This Course Expand All Collapse All 75 Lectures 16:10:04 + – Introduction 4 Lectures 50:41 Introducing the Java for Complete Beginners course, and what you need to install in order to get started. Don\'t worry too much about what this stuff we\'re installing actually does --- we\'ll look at that next time. Introduction and Installation 09:39 In this tutorial we\'ll talk about such things as the Java Virtual Machine and the Java Development Kit; we\'ll discuss what a programming language is exactly, and how you basically make your computer do stuff. What Java Is and How It Works 12:38 What should you do when you\'ve completed a basic Java course, and can you get a job with Java? In this video I\'ll explain a bit about some of the major areas of advanced Java, the process of finding a job and what you might want to study next, once you\'ve completed basic Java. Getting a Job and What to Study After Completing Basic Java 18:59 Some ideas about how best to learn Java and how to work through this course. How To Get The Most Out Of This Course 09:25 + – Programming Core Java 48 Lectures 10:22:38 Create a simple Java program with Eclipse. A Hello World Program 04:46 Variables are one of the most basic essential building blocks of computer programs. We\'ll take a look at Java\'s basic types of variables here. Using Variables 07:53 The String class allows you to work with text in Java. Strings: Working With Text 09:21 In this tutorial we\'ll look at how to create loops in your code so that you can execute the same lines of code repeatedly. While Loops 07:15 \"For\" loops allow you to control exactly how many times your loop executes. For Loops 09:28 \"If\" 12:26 A tutorial on how to get user input in your program using the Scanner class. Getting User Input 08:52 How to use do...while loops in Java, plus variable scope and multi-line comments. I take a look at a solution to a commonly-assigned beginner\'s exercise in Java. Do ... While 08:05 The switch statement lets you choose between multiple alternatives. Switch 06:52 How to use arrays in Java; creating, accessing and iterating through arrays. Also, a look at the difference between a value and a reference. Arrays 09:46 A tutorial on arrays of Strings in Java, plus another way to iterate through an array, and more stuff on the difference between values and references. Arrays of Strings 08:39 How to work with multi-dimensional arrays in Java and info on how multi-dimensional arrays actually work, plus some tips on how to remember which index is which. Multi-Dimensional Arrays 13:06 It\'s finally time to take a look at classes and objects, the main building blocks of OO (Object Oriented) programming. Classes and Objects 11:44 Classes (and objects) can contain data and subroutines, the latter being referred to as \"methods\". We\'ll look at methods here. Note: there\'s a little error right at the end here -- I copied person1.sayHello() but didn\'t change it to person2 .. Methods 11:05 In this tutorial we\'ll look at returning values from methods, including the standard \"get method\", \"getter\" or \"accessor\" form. Getters and Return Values 10:31 We\'ve already covered returning values from methods; now we\'ll take a look at passing values to methods. These two techniques allow you, among other things, to create methods that process one piece of data into another ... Method Parameters 15:00 Setters (or set methods, or, if you have come from the 1970s in a time machine, \"mutators\"), allow you to change the data in your objects. We\'ll also take a look here at the \"this\" keyword. Setters and \"this\" 10:58 Constructors are a special kind of method that gets run automatically when you create an object from a class (or in the lingo, \"instantiate\" an object). Constructors 10:18 A tutorial on the static keyword in Java. We\'ll also take a look at \"final\". Static (and Final) 19:46 It\'s time to take a closer look at the important topic of formatting and combining strings .... String Builder and String Formatting 19:43 toString() is a method of the Object class, which is the ultimate parent of all objects in Java. By over-riding it, you can implement a way to create a string representation of your object. The toString Method 11:06 Inheritance is one of the basic building blocks of OO programs. And yes, believe it or not, it is actually used in the real world -- constantly --  but perhaps most often when working with elaborate external APIs, such as Swing or servlets. Inheritance 14:09 Packages allow you to organise your Java code, in a hierarchical structure exactly like the folder structure on your computer. Packages 14:03 Interfaces are a vital tool in Java programming. At first you may be tempted to suspect that people only use them to show off their Java skills; but once you understand fully what they do, you won\'t want to do without them. Trust me on this one ... Interfaces 19:15 Public, private and protected are Java keywords that allow you to implement \"encapsulation\" -- hiding away the internal mechanism of your classes, while exposing only certain selected methods the rest of your program. Public, Private, Protected 19:57 Polymorphism means being able to use a child class wherever a parent class is expected. For example, if you want to use a class of type Animal, you can always use a class of type Dog instead (if Dog extends Animal). Polymorphism 10:04 Encapsulation is the art of hiding away the workings of a class and only exposing a public API. We\'ll also take a look at how to read the API docs. Encapsulation and the API Docs 11:17 Let\'s take a look at how to change one kind of number into another. Casting Numerical Values 11:16 Upcasting and downcasting really test your understanding of Java references and objects. If you can understand this stuff (and yes, it\'s also very useful aside from testing your understanding), then you\'ve definitely got the aptitude to make a great programmer. And if you CAN\'T understand it, then stick at it :)  Upcasting and Downcasting 13:54 Generics allow you to use and create classes that work with objects, the type of which you can specify when you use \"new\". Using Generics 12:40 If you want to pass templated objects to methods, you might want to make use of some interesting syntax .... Generics and Wildcards 17:50 Anonymous classes look a bit weird at first, but they can really help to streamline your code. Anonymous Classes 08:56 The easiest way to read a text file is by using the Scanner class. We\'ll take a look at Scanner in this tutorial. Scanner basically just parses an input stream (a sequence of bytes, in other words) into lines or tokens, but it will open a file for you too if you ask it the right way. Reading Files Using Scanner 12:55 It\'s finally time to start looking at exceptions .... A major component of the Java language, and one that you\'re bound to run across in any sizeable program. Here we\'ll look at the two ways of handling exceptions and how they work. Handling Exceptions 16:23 You can throw more than one possible type of exception from a method, and you can catch multiple exceptions in your try-catch block We\'ll look at the possibilities here, and also take a look at a common interview/exam question. Multiple Exceptions 12:11 So far we\'ve looked at checked exceptions; the kinds of exception that you are forced to handle. But there are also unchecked (runtime) exceptions. These are exceptions that you can handle if you want to, but you\'re not forced to. Knowing about the two main kinds of exception is considered an important test of knowledge in Java. Runtime vs. Checked Exceptions 08:49 Abstract classes allow you to define the parent class of a new hierarchy without having to worry about the user actually instantiating the parent. For instance you could create an \"Animal\" class just to act as the basis for \"Dog\", \"Cat, \"Sheep\" and so on, even defining some functionality in \"Animal\", but at the same time preventing the user of your hierarchy from trying to create an \"Animal\" object (which after all wouldn\'t make much sense -- you never encounter an abstract \"animal\" in the real world; only particular kinds of animals). Abstract Classes 12:58 To really get serious about reading files in Java, you need to get used to stacking objects inside each other like Russian dolls. Although the code we\'ll examine here is complex, in the next tutorial we\'ll discover a Java 7 language feature that can simplify it a lot. It\'s also a very flexible structure for reading files, since you can read different kinds of files by changing a class or two. Reading Files With File Reader 17:26 The Java 7 Try-With-Resources syntax can massively simplify your file reading/writing code. Try-With-Resources 11:12 A tutorial on writing text files. Which is very similar to reading text files. Creating and Writing Text Files 06:20 A tutorial on how to implement the .equals method for your own classes. The Equals Method 17:21 Classes can be declared almost anywhere in Java. In particular, it\'s often very useful to declare either static or non-static classes within other classes. http://www.caveofprogramming.com/java/inner-classes/ Inner Classes 16:33 The enum keyword lets you create constants that belong to a fixed set of values (think colours, animals, etc). In the first half of this video we\'ll look at basic usage and why we need enum, then we\'ll move on to more advanced usage. Source code: http://www.caveofprogramming.com/java/enum/ Enum Types: Basic and Advanced Usage 19:20 Recursion is a programming technique that allows you to solve certain kinds of problems very elegantly. It involves calling a method from itself. Crazy!Source code: http://www.caveofprogramming.com/java/recursion/ Recursion: A Useful Trick Up Your Sleeve 17:26 Serialization is the process of turning objects into a stream of binary data; by serializing objects, you can store them in a file and restore them later from the same file, implementing saving and loading in your application. Serialization: Saving Objects to Files 21:17 We can serialize entire arrays (or ArrayLists) just as easily as single objects. I\'ll also show you a good trick for serializing multiple objects individually in this tutorial, plus we\'ll talk a bit about type erasure. Serializing Arrays 14:42 To finish off the stuff about serialization, we\'ll take a look at the transient keyword, plus a few things that might catch you out. The Transient Keyword and More Serialization 16:14 Java only supports one method of passing values to methods, unlike, e.g. C++. We\'ll take a look at exactly how argument passing works in this tutorial (note: source code attached to this lecture; for other lectures, see the source attached to the final lecture). Passing by Value 21:30 + – The Java Collections Framework 13 Lectures 03:17:04 The ArrayList class takes the work out of using arrays, by providing you with a resizeable array object. ArrayList: Arrays the Easy Way 09:58 If you want to add items efficiently to somewhere in a list other than the beginning or end, you need a linked list. IMPORTANT NOTE: I had misunderstood something when making this video, as pointed out to me by \"kidbabic\" on YouTube among others. If you add or insert something to a LinkedList by specifying an index, the list has to iterate over all items in itself up to that point in order to find the insertion/deletion point. So adding or removing to LinkedList is only faster if you use an iterator, which you have ready pointing at the correct point. See the tutorial on iterators later on for more info. Linked Lists 13:56 Maps let you store key-value pairs, so that for example you can retrieve objects via an ID. HashMap is the most lightweight in terms of memory, and the one you\'ll use the most often. HashMap: Retrieving Objects via a Key 09:57 If you want your map keys to be sorted, you can use special kinds of maps. A lot of what we\'ll cover here also applies to sets, which we\'ll look at shortly. Sorted Maps 12:02 Used less often than lists or maps, sets are nevertheless great for creating collections of things that are unique --- in other words, for removing duplicates. It\'s also very quick to check whether a value exists in a set, whereas checking for something in a list can take a long time in computer terms. Sets 15:54 If you want to use objects of your own classes in sets, or you want to use them as the keys in maps, you need to do a couple of little things .... Using Custom Objects in Sets and as Keys in Maps 11:20 A common requirement for a list is to sort it in some kind of order. Fortunately Java makes sorting very easy. Sorting Lists 21:29 How will your objects be sorted, if you sort them somehow? The sort order often depends on something called the natural order, and you can define custom natural orders for your own classes to sort them in the order you want. Natural Ordering 19:35 Queues are used less often than lists, sets and maps, but they\'re still very useful; especially if you\'re doing any multi-threading. Queues 18:17 Iterators are the thing that enable you to get each element in a collection in sequence. We\'ll look at using them in this tutorial, then next time we\'ll move on to implementing our own. Using Iterators 09:25 If you implement Iterable, you\'ll be able to iterate over your own custom collection. Implementing Iterable 18:55 It\'s time for a review of how to choose which of the main Collection classes and types to use. In this tutorial we\'ll go over some stuff we learned earlier and bring it all together. Deciding Which Collection to Use 14:24 You can use \"nested\" Collections objects to represent all kinds of complicated data structures in Java; maps of lists of sets of maps, etc, etc. We\'ll take a look at a simple example here, inspired by a university coursework question. Complex Data Structures 21:52 + – Appendix 4 Lectures 01:05:06 My favourite Eclipse shortcuts. Eclipse Shortcuts 13:12 An extended video detailing my strategy for finding a job as a software developer, plus stuff about the question of whether you need experience or a degree, what you can do to increase your chances and my own personal story of how I got into software development. Getting a Job Extended Version: What you need, a strategy for finding work, and my story. 30:30 Ten tips that every programmer should know (and hopefully the professionals already do!). These tips WILL, if followed, hugely increase your productivity. Ten Tips for Improving Your Coding 05:48 In this tutorial we\'ll take a look at using the Eclipse debugger. Debugging is useful for when your program compiles and runs but doesn\'t do what you expect, and you\'re having a hard time figuring out why. Debugging allows you to execute the program line by line and to see what values each variable in your program have at each step. Debugging in Eclipse 15:36 + – What\'s New In Java 8? 1 Lecture 31:55 A tutorial on the most important new feature in JDK 8. Note, source code attached to this lecture. Source code for most other lectures is attached to the final lecture in this course. Lambda Expressions 31:55 + – Tests 1 Lecture 00:25 Basic Java Programming: Test Your Knowledge 00:25 + – More ... 2 Lectures 00:33 Recommended Books 00:24 Still to come ... 00:09 + – Source Code 1 Lecture 00:02 Source Code 00:02 + – Discounts 1 Lecture 00:47 Free C++ and 50% Off All My Courses 00:47 About the Instructor 4.4 Average rating 60,154 Reviews 958,186 Students 12 Courses John Purcell Software Development Trainer After working as a software developer and contractor for over 14 years for a whole bunch of companies including CSC, Proquest, SPSS and AT&T in the UK and Netherlands, I decided to work full-time as a private software trainer. After spending four years in the beautiful city of Budapest, Hungary and a year in Berlin, I now live in my home town of Derby, UK. About Us Udemy for Business Become an Instructor Affiliate Blog Topics Mobile Apps Support Careers Resources English Copyright © 2017 Udemy, Inc. Terms Privacy Policy and Cookie Policy Intellectual Property','Java Tutorial for Complete Beginners | Udemy'),(6,'www.javaworld.com/category/learn-java/','2017','August','Middle August','1/8/2017','Home','sajid24x7@gmail.com',109,'Close Ad Trending: Learn Java Java 101 Java App Dev Java Toolbox Open Source Java Programming Careers Java Q&A Resources/White Papers Search javaworld Sign In | Register Hi! Here are the latest Insider stories. How to avoid big data analytics failures 21 technologies transforming software development The best JavaScript testing tools for React Review: Google Cloud Spanner takes SQL to NoSQL scale More Insider Sign Out Search for Suggestions for you Insider email Core Java All Core Java Agile Development Java Concurrency Java Language Java Platform Java Security Programming Careers Testing and Debugging Enterprise Java All Enterprise Java APIs Big Data Cloud Computing Data Analytics Development Tools Java App Dev Java Web Development Open Source Scripting and JVM Languages Learn Java All Learn Java Design Patterns Mobile Java All Mobile Java Java Android Developers Java iOS Developers News Features How-Tos Blogs Resources/White Papers Newsletters × Close Learn Java Learn Java news, information, and how-to advice Java 101By Jeff Friesen Java 101: Datastructures and algorithms in Java, Part 1 Java Q&ABy Jeff Friesen Java library evolution and other puzzlers Feature Type dependency in Java, Part 2 Make type dependency work to your advantage when programming with the Java Collections API, generics, and lambda expressions. Java Q&ABy Jeff Friesen Java 9\'s other new enhancements, Part 6: Concurrency Java 9 introduces a publish-subscribe framework for reactive streams, improvements to the CompletableFuture class, and other concurrency enhancements Java 101By Jeff Friesen Java 101: Regular expressions in Java, Part 2 Complete your introduction to the Regex API, then find out how regular expressions make quicker work of common tasks like code documentation and lexical analysis. Java 101By Jeff Friesen Java 101: Regular expressions in Java, Part 1 Pattern matching is an important technique used in text processing, and Regex is here to help. Find out how to use the Pattern class and constructs like quantifiers and boundary matchers to describe patterns in your Java programs. Java Q&ABy Jeff Friesen Java 9\'s other new enhancements, Part 4: Multi-release JAR files A Java 9 extension to the JAR file format makes it easier for third-party libraries and frameworks to use language and API features from newer Java releases Java 101By Jeff Friesen Java 101: Interfaces in Java Extracting class interfaces into Java interfaces can increase the reusability of your code, but only if you know how to use their special properties. Java Q&ABy Jeff Friesen Java 9\'s other new enhancements, Part 3: The Process API Updates to the Process API will make it easier to obtain a process ID, get additional information about a process, and execute actions on process termination Tutorial Type dependency in Java, Part 1 Covariance and contravariance might seem esoteric, but you\'ll need these concepts more than ever as the Java language evolves. Get started with type dependency in array types, generic types, and the wildcard element. Java Q&ABy Jeff Friesen Java 9\'s other new enhancements, Part 2: Milling Project Coin JEP 213 builds on Java 7\'s Project Coin with small language improvements and additions for your Java programs Java Q&ABy Jeff Friesen Java 9\'s other new enhancements, Part 1: Factory methods in Java Collections The module system and REPL tool have received widespread attention, but Java\'s newest release has much more to offer. This series introduces other enhancements to Java 9, beginning with the new convenience factory methods in the Java... Analysis Coding boot camp grads write better code Boot camp grads lead college grads in practical programming skills, but lag in deeper understanding of systems and algorithms Feature 10 resume do’s and don’ts for developers Recruiters and hiring managers reveal what makes a candidate stand out -- or fall flat Java Q&ABy Jeff Friesen Are checked exceptions good or bad? While some programmers believe checked exceptions are a good language feature, others would disagree. In this post, Jeff introduces checked exceptions, then dives into the debate. How-To Self-taught? 3 keys to acing the coding interview Coding interviews are nerve-wracking, but using blind coding challenges can help boost your performance and even the odds Feature Where to find the world\'s best programmers Two countries are leading the world for today\'s top coders; the question is why Java Q&ABy Jeff Friesen Read-only properties in JavaFX 8 Learn how to expose internal modifiable properties as external read-only properties in JavaFX 8 Java Q&ABy Jeff Friesen Interface-based applications in Java 8 Java 8\'s support for static methods in interfaces made it possible to create interface-based applications. Learn how in this short blog post. Java Q&ABy Jeff Friesen Immutable empty collections and iterators Find out why the java.util.Collections class includes static methods that return immutable empty collections and iterators. Load More Recent Java How-Tos Popular Resources See All Go Popular on JavaWorld Eclipse, NetBeans, or IntelliJ? Choose your Java IDE Android Studio for beginners: Code the app Open source Java projects: Docker Swarm Sponsored Links JavaWorld JavaWorld is the original independent resource for Java developers, architects, and managers. Follow us Core Java Enterprise Java Learn Java Mobile Java How-Tos Features News Blogs Resources Newsletters About Us Contact Privacy Policy Advertising Careers at IDG Site Map Ad Choices E-commerce Affiliate Relationships Copyright © 2017 IDG Communications, Inc. Explore the IDG Network descend CIO Computerworld CSO GameStar Greenbot IDC IDG IDG Connect IDG TechNetwork IDG.TV IDG Ventures Infoworld IT News ITwhitepapers ITworld JavaWorld LinuxWorld Macworld Network World PCWorld TechConnect TechHive','Learn Java information, news, and how-to advice | JavaWorld'),(7,'www.wipro.com/services/cloud-services/','2017','August','Middle August','1/8/2017','Home','sajid24x7@gmail.com',500,'Skip to menu Top right menu Home About Us Newsroom Investors Sustainability Careers Contact Us Global Site Search Skip to Banner Main Menu Industries Aerospace Automotive Banking Communication Service Providers Consumer Goods Education Energy Engineering & Construction Government Healthcare Hi-Tech Insurance Manufacturing Media, Entertainment & Publishing Medical Devices Natural Resources Network Equipment Provider Pharmaceutical & Life Sciences Professional Services Retail Securities & Capital Markets Transportation Utilities Services Analytics Applications Business Outcome Services Business Process Cloud Consulting Digital EcoEnergy Enterprise Architecture Information Management Infrastructure Services Internet of Things Managed Services Mobility Open Source Product Engineering Future Drivers Cognitive Systems Smart Devices Man-Machine Interface Next-Generation Application Architecture Software Defined Everything Insights Analyst Speak Academia Collaboration Industry Research Winsights Slides Over 99.5% service efficiency for Global Payments Finance & Accounting process efficiency for Global Payments through a zero-capex pricing model using BPaaS Read More Delta Drone Agility through Cloud automation Cloud powers automated, real-time invasion detection, improved decision making and cost savings for Delta Drone. Read More Breadcrumb Home > Services > Cloud http://www.wipro.com/services/cloud-services/ Cloud Sub Menu Overview Services Cloud Advisory Cloud Infrastructure Services Cloud Application Migration Overview Solutions Rapid Cloud Enablement Suite Public Cloud Applications Overview Cloud CRM Cloud ERP Business Process as-a-Service (BPaaS) Overview Finance & Accounting BPaaS Customer Service BPaaS Cloud Management Services Overview Solutions ServiceNXT™ Cloud Operations Center Cloud Integration Cloud Security Solutions Rapid Cloud Enablement Suite ServiceNXT™ Cloud Operations Center Insights Success Stories Research Whitepapers Articles POV Talking Business Flyers Blogs Cloud Wipro’s Cloud services helps enterprises in enhancing customer experience, accelerating business outcomes and building future ready capabilities. We help our customers optimize, scale, manage and outsource IT resources to rationalize investments. Our industry solutions help simplify processes, modernize applications and enable cognitive intelligence to meet our customers’ business needs. Wipro partners with best of breed products such as Salesforce, Oracle, Microsoft and a host of ecosystem partners to provide cutting edge solutions. How Wipro Helps With Wipro\'s cloud services, you empower your business leaders and employees to do business better. Our Cloud solutions help you: Optimize, scale, manage and outsource your IT resources Reimagine journeys and processes to enable digital business Enable customers, employees and partners with a consistent omni-channel experience Transform to an agile business and a dynamic growth engine Wipro\'s in-depth industry and technology expertise can deliver true multi-directional dynamism, thereby enabling your enterprise to experience a seamless cloud journey. “Wipro is best-suited to complex or transformational projects. For example, Wipro has led digital transformation based on Salesforce at leading brands such as Philips (connected products) and ST Microelectronics (digital partner ecosystem). Wipro has significant experience with legacy migration and complex integration. Though Wipro does plenty of standalone work in this space, it is particularly well-suited to clients seeking a long-term partner for ongoing Salesforce services.” - Liz Herbert, The Forrester Wave™: Salesforce Implementation Partners, Q2 2015, Forrester Research, Inc., June 26, 2015 Services Portfolio Cloud Infrastructure (IaaS) Cloud Platforms (PaaS) Business Applications (SaaS) Business Processes (BPaaS) Solutions VirtuaDesk™ ServiceNXT™ Cloud Operations Center Alliances Cisco Oracle Salesforce \'+$(\'.how_wipro_helps_container > .container > div\').children(\'h2\').html()+\' \'+$(this).children(\'h2\').html()+\' Contact Wipro Spotlight The Cloud Way - How to Choose a Business-Led Model Will the initial gains from Cloud technologies sustain over time? This paper intends to explore how current and future investments in the Cloud will benefit businesses Download View All Business Runs on the Cloud \"Business Runs on the Cloud\", a research commissioned by Wipro, explores the role that business leaders believe disruptive technologies will play in their organizations in future Download View All Wipro on the Truth About Cloud Economics This Wipro and HBR article focuses on \'The Truth About Cloud Economics\', featuring Atul Sood, VP for Advanced Technologies & Solutions, Wipro Ltd., Download View All Recommended Are You Leveraging Enough Gamification in Your Digital CRM Today, businesses are undergoing Digital Transformation to remain recognized in their competitive market and are looking at building \"Digital CRM\". Download View All Delight Your Customer through Enhanced Visibility Wipro helped a leading healthcare and security services company achieve 60% improvement in pipeline visibility and 40% increase in cross-sell rates. Download View All Infuse Agility Into Your Digital Business with DevOps The transformation to a Digital Business requires organizations to absorb new priorities and align themselves to address rapidly changing business requirements. Download View All Need Help / Contact Us Content info © Wipro Limited 2017 Privacy Policy| Disclaimer| RSS Feed| Blog| Wipro TV| Sitemap| Feedback Social Media WEB-1 Geo Menu Select a country/region and language Asean ANZ Continental Europe LATAM Africa North America Asean English China English Chinese India English Japan English Japanese Korea English Australia English BENELUX English DACH English German France English Nordic Region English Brazil English LATAM English Africa English Canada English','Cloud Services, Cloud Technology, Cloud Solutions, Cloud Consulting | Wipro');

/*Table structure for table `context2` */

DROP TABLE IF EXISTS `context2`;

CREATE TABLE `context2` (
  `uid` varchar(100) DEFAULT NULL,
  `lamda3` varchar(100) DEFAULT NULL,
  `lamda2` varchar(100) DEFAULT NULL,
  `lamda1` varchar(500) DEFAULT NULL,
  `user_` varchar(500) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Data for the table `context2` */

insert  into `context2`(`uid`,`lamda3`,`lamda2`,`lamda1`,`user_`) values ('1','Busy','Programming','Tomcat','sajid24x7@gmail.com'),('1','Busy','ReadWrite','Winword','sajid24x7@gmail.com'),('2','Busy','Programming','Tomcat','sajid24x7@gmail.com'),('2','Busy','ReadWrite','Winword','sajid24x7@gmail.com'),('3','Busy','Programming','Tomcat','sajid24x7@gmail.com'),('3','Busy','ReadWrite','Winword','sajid24x7@gmail.com'),('4','Busy','Programming','Tomcat','sajid24x7@gmail.com'),('4','Relaxed','listening music','wmplayer','sajid24x7@gmail.com'),('5','Busy','Programming','Tomcat','sajid24x7@gmail.com'),('5','Relaxed','listening music','wmplayer','sajid24x7@gmail.com'),('6','Busy','Programming','Tomcat','sajid24x7@gmail.com'),('6','Relaxed','listening music','wmplayer','sajid24x7@gmail.com'),('7','Busy','Programming','Tomcat','sajid24x7@gmail.com'),('7','Relaxed','listening music','wmplayer','sajid24x7@gmail.com');

/*Table structure for table `feedback` */

DROP TABLE IF EXISTS `feedback`;

CREATE TABLE `feedback` (
  `n` int(11) DEFAULT '1',
  `u` int(11) DEFAULT '1',
  `m` int(11) DEFAULT '1',
  `q` int(11) DEFAULT '1'
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Data for the table `feedback` */

insert  into `feedback`(`n`,`u`,`m`,`q`) values (21,19,14,5);

/*Table structure for table `graph` */

DROP TABLE IF EXISTS `graph`;

CREATE TABLE `graph` (
  `sno` varchar(10) DEFAULT NULL,
  `FindRate` double DEFAULT NULL,
  `AvgPrecision` double DEFAULT NULL,
  `AvgRecall` double DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Data for the table `graph` */

insert  into `graph`(`sno`,`FindRate`,`AvgPrecision`,`AvgRecall`) values ('0',0.2,0.13333333333333333,0.14736842105263157);

/*Table structure for table `location` */

DROP TABLE IF EXISTS `location`;

CREATE TABLE `location` (
  `email` varchar(100) NOT NULL,
  `ip` varchar(100) DEFAULT NULL,
  `location` varchar(100) NOT NULL,
  PRIMARY KEY (`email`,`location`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Data for the table `location` */

insert  into `location`(`email`,`ip`,`location`) values ('sajid24x7@gmail.com','183.83.89.255','Home');

/*Table structure for table `score` */

DROP TABLE IF EXISTS `score`;

CREATE TABLE `score` (
  `uid` varchar(100) DEFAULT NULL,
  `uri` varchar(500) DEFAULT NULL,
  `impr` double DEFAULT NULL,
  `context` double DEFAULT NULL,
  `rank` double DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Data for the table `score` */

insert  into `score`(`uid`,`uri`,`impr`,`context`,`rank`) values ('2','www.codecademy.com/learn/learn-java/',0.032369237,0.19473527,0.0010477676),('6','www.javaworld.com/category/learn-java/',0.0817535,0.00026961422,0.0066836346),('4','www.tutorialspoint.com/java/',0.06991759,0.007291895,0.0048884694),('3','www.tutorialspoint.com/java/java_overview.htm',0.035696544,0.037921827,0.0012742432),('5','www.udemy.com/java-tutorial/',0.048654232,0.0014021407,0.0023672343);

/*Table structure for table `starttime` */

DROP TABLE IF EXISTS `starttime`;

CREATE TABLE `starttime` (
  `user` varchar(100) NOT NULL,
  `context` varchar(100) NOT NULL,
  `date_` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`user`,`context`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Data for the table `starttime` */

/*Table structure for table `users` */

DROP TABLE IF EXISTS `users`;

CREATE TABLE `users` (
  `uid` int(11) DEFAULT NULL,
  `name` varchar(100) DEFAULT NULL,
  `lname` varchar(100) DEFAULT NULL,
  `pwd` varchar(100) DEFAULT NULL,
  `email` varchar(100) DEFAULT NULL,
  `tele` varchar(100) DEFAULT NULL,
  `country` varchar(100) DEFAULT NULL,
  `city` varchar(100) DEFAULT NULL,
  `zip` varchar(100) DEFAULT NULL,
  `gen` varchar(10) DEFAULT NULL,
  `addr` varchar(100) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Data for the table `users` */

insert  into `users`(`uid`,`name`,`lname`,`pwd`,`email`,`tele`,`country`,`city`,`zip`,`gen`,`addr`) values (1,'Sajid','MD','sajid','sajid24x7@gmail.com','8121953811',' India','Hyderabad','500090','male','siri towers');

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
